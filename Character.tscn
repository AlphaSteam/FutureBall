[gd_scene load_steps=11 format=2]

[ext_resource path="res://Robot/PNG/Poses/character_robot_idle.png" type="Texture" id=1]
[ext_resource path="res://arrow_body.png" type="Texture" id=3]
[ext_resource path="res://Robot/PNG/Poses/character_robot_run1.png" type="Texture" id=5]
[ext_resource path="res://Robot/PNG/Poses/character_robot_run2.png" type="Texture" id=6]
[ext_resource path="res://Robot/PNG/Poses/character_robot_fall.png" type="Texture" id=7]
[ext_resource path="res://Robot/PNG/Poses/character_robot_run0.png" type="Texture" id=8]
[ext_resource path="res://Robot/PNG/Poses/character_robot_jump.png" type="Texture" id=9]

[sub_resource type="GDScript" id=3]
script/source = "extends KinematicBody2D

var DEFSPEED=180
var DEFFRICTION = 0.4
var DEFACC = 0.8
var DEFGRAVITY = 10
var JUMP_POWER = -300
var FLOOR = Vector2(0,-1)
var INITJUMPS =3
var INITDASHES =2
var WALLFALLSPEED = 8

export var id = 4
var gravity = DEFGRAVITY
var velocity = Vector2(0,0)
var on_ground = false
var jump_power = 0
var dash = false
var speed = DEFSPEED
var friction = DEFFRICTION
var acceleration = DEFACC
var cooldown = false
var jumps_available = INITJUMPS   # Do I have jumps available?
var dashes_available = INITDASHES # Do I have dashes available?
var end_jump = false
var end_jump_after = false
var on_wall = false
var flip_character_once = false # Used to flip the character when sliding through a wall, so I don't do it more than once.


onready var timer = get_parent().get_node(\"Camera2D/CanvasLayer/TimerLabel/Timer\")
onready var reset_position2 = position


func _ready():
	pass

func _physics_process(delta):
	var input_velocity = Vector2.ZERO
	if Input.is_action_just_pressed(\"Right_%s\" % id):
		$AnimatedSprite.flip_h = false
	if Input.is_action_pressed(\"Right_%s\" % id):
		$AnimatedSprite.play(\"run\")
		
		input_velocity.x += 1
		if Input.is_action_just_pressed(\"Dash_%s\" % id):
			
			_dash()
	if Input.is_action_just_pressed(\"Left_%s\" % id):
		$AnimatedSprite.flip_h = true	
	if Input.is_action_pressed(\"Left_%s\" % id):
		$AnimatedSprite.play(\"run\")
		input_velocity.x -= 1
		if Input.is_action_just_pressed(\"Dash_%s\" % id):
			_dash()
	
	if Input.is_action_just_pressed(\"Up_%s\" % id):
		if jumps_available > 0 and on_wall == false:
			jumps_available = jumps_available - 1
			
			velocity.y = JUMP_POWER
			on_ground = false
			end_jump = false
			
			$\"Minimun jump duration\".start()
	if  !Input.is_action_pressed(\"Left_%s\" % id) && !Input.is_action_pressed(\"Right_%s\" % id) && on_ground: 
		$AnimatedSprite.play(\"idle\")
	if(dash == false):		
		velocity.y += gravity
	
	
	
	if Input.is_action_pressed(\"Up_%s\" % id):
		$\"New jump threshold\".start()
	
		
		
	if velocity.y < 0 && Input.is_action_just_released(\"Up_%s\" % id) && end_jump == true:
		_end_jump()
		
	elif velocity.y < 0 && Input.is_action_just_released(\"Up_%s\" % id) && end_jump == false:
		end_jump_after = true
	
	
		
		
	input_velocity = input_velocity.normalized() * speed
	if input_velocity.length() > 0:
		velocity.x = velocity.linear_interpolate(input_velocity, acceleration).x
	else:
		# If there's no input, slow down to (0, 0)
		velocity.x = velocity.linear_interpolate(Vector2.ZERO, friction).x
	#print(velocity)
	if on_ground && velocity.y > 0:
		jumps_available = INITJUMPS
		dashes_available = INITDASHES
	velocity = move_and_slide(velocity,FLOOR)
	
	if is_on_floor():
		
		on_ground = true
		if(dash== false):
			speed = DEFSPEED
	else:
		if velocity.y < 0:
			$AnimatedSprite.play(\"jump\")
		else:
			$AnimatedSprite.play(\"fall\")
		on_ground = false
		if(dash == false):
			speed=4.0*DEFSPEED/6
	if is_on_wall() && (Input.is_action_pressed(\"Left_%s\" % id) || Input.is_action_pressed(\"Right_%s\" % id)) && is_on_floor()==false:
		on_wall = true
		if flip_character_once == false:
			
			$AnimatedSprite.flip_h = !$AnimatedSprite.flip_h
			flip_character_once = true
		if velocity.y > 0 :
			gravity = 0.01
		else:
			gravity = DEFGRAVITY
		if velocity.y > WALLFALLSPEED:
			velocity.y = WALLFALLSPEED
		$\"New jump threshold\".start()
			
	else:
		if flip_character_once == true:
			#$AnimatedSprite.flip_h = !$AnimatedSprite.flip_h
			flip_character_once = false
		
		on_wall = false
		gravity = DEFGRAVITY
		
	if position.y > 400:
		position = reset_position2
		emit_signal(\"sd%s\" % id)
		timer.stop()
		timer.set_wait_time(40)
		timer.start()
	
	for i in get_slide_count():
		var collision = get_slide_collision(i)
		if collision.collider.has_method(\"collide_with\"):
			collision.collider.collide_with(collision,self)
	
	
func _end_jump():
	velocity.y += - velocity.y*0.9 # It doesn't kill the momentum inmediatly
	end_jump = false


func _dash():
	if(cooldown == false && dashes_available > 0):
		acceleration = 0.5
		speed = speed + (DEFSPEED * 3 - speed) * 0.8
		velocity.y = 0
		dash = true
		cooldown = true
		dashes_available -=1
		$\"New jump threshold\".start()
		$\"New jump threshold\".paused = true
		$\"Dash Time\".start()



func _on_Dash_Time_timeout():
	dash = false
	acceleration = DEFACC
	friction = DEFFRICTION
	$\"New jump threshold\".paused = false
	$\"Dash Cooldown\".start()

func _on_Dash_Cooldown_timeout():
	cooldown = false
	


func _on_Minimun_jump_duration_timeout():
	end_jump = true
	if (end_jump_after):
		_end_jump()
		end_jump_after= false


func _on_New_jump_threshold_timeout():
	jumps_available = 0
"

[sub_resource type="SpriteFrames" id=1]
animations = [ {
"frames": [ ExtResource( 1 ) ],
"loop": false,
"name": "idle",
"speed": 0.0
}, {
"frames": [ ExtResource( 9 ) ],
"loop": false,
"name": "jump",
"speed": 0.0
}, {
"frames": [ ExtResource( 7 ) ],
"loop": false,
"name": "fall",
"speed": 0.0
}, {
"frames": [ ExtResource( 8 ), ExtResource( 5 ), ExtResource( 6 ) ],
"loop": true,
"name": "run",
"speed": 10.0
} ]

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 8.55065, 13.6003 )

[node name="Player" type="KinematicBody2D" groups=[
"Jugador",
]]
script = SubResource( 3 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
position = Vector2( -0.0409164, -0.25226 )
scale = Vector2( 0.261794, 0.261794 )
frames = SubResource( 1 )
animation = "run"
frame = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, 4.09237 )
shape = SubResource( 2 )
one_way_collision_margin = 0.0

[node name="Arrow" type="NinePatchRect" parent="."]
margin_left = 1.03322
margin_top = 0.440845
margin_right = 26.0332
margin_bottom = 5.44084
rect_rotation = -7.7
rect_scale = Vector2( 0.5, 0.5 )
rect_pivot_offset = Vector2( 0, 5 )
texture = ExtResource( 3 )
region_rect = Rect2( 0, 0, 3, 3 )
patch_margin_left = 7
patch_margin_right = 7
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Ball" type="Position2D" parent="."]
position = Vector2( -7, 12 )

[node name="Dash Cooldown" type="Timer" parent="."]
wait_time = 0.657
one_shot = true

[node name="Dash Time" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[node name="New jump threshold" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[node name="Minimun jump duration" type="Timer" parent="."]
wait_time = 0.15
one_shot = true
[connection signal="timeout" from="Dash Cooldown" to="." method="_on_Dash_Cooldown_timeout"]
[connection signal="timeout" from="Dash Time" to="." method="_on_Dash_Time_timeout"]
[connection signal="timeout" from="New jump threshold" to="." method="_on_New_jump_threshold_timeout"]
[connection signal="timeout" from="Minimun jump duration" to="." method="_on_Minimun_jump_duration_timeout"]
